Search.setIndex({"docnames": ["backward_difference", "basen", "binary", "catboost", "count", "glmm", "hashing", "helmert", "index", "jamesstein", "leaveoneout", "mestimate", "onehot", "ordinal", "polynomial", "quantile", "sum", "summary", "targetencoder", "woe", "wrapper"], "filenames": ["backward_difference.rst", "basen.rst", "binary.rst", "catboost.rst", "count.rst", "glmm.rst", "hashing.rst", "helmert.rst", "index.rst", "jamesstein.rst", "leaveoneout.rst", "mestimate.rst", "onehot.rst", "ordinal.rst", "polynomial.rst", "quantile.rst", "sum.rst", "summary.rst", "targetencoder.rst", "woe.rst", "wrapper.rst"], "titles": ["Backward Difference Coding", "BaseN", "Binary", "CatBoost Encoder", "Count Encoder", "Generalized Linear Mixed Model Encoder", "Hashing", "Helmert Coding", "Category Encoders", "James-Stein Encoder", "Leave One Out", "M-estimate", "One Hot", "Ordinal", "Polynomial Coding", "Quantile Encoder", "Sum Coding", "Summary Encoder", "Target Encoder", "Weight of Evidence", "Wrappers"], "terms": {"class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "category_encod": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "backward_differ": 0, "backwarddifferenceencod": [0, 8], "verbos": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "0": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "col": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "none": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "map": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "drop_invari": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "fals": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "return_df": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "true": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "handle_unknown": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "valu": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "handle_miss": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "contrast": [0, 7, 12, 13, 14, 16], "encod": [0, 1, 2, 6, 7, 10, 11, 12, 13, 14, 16, 19, 20], "categor": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "variabl": [0, 2, 3, 4, 7, 8, 10, 12, 13, 14, 16], "paramet": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "int": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "integ": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "indic": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "output": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "list": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "column": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "all": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "string": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "bool": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "boolean": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "whether": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "drop": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "varianc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "return": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "panda": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "datafram": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "from": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "transform": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "otherwis": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "numpi": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "arrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "str": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "option": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "ar": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "error": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "return_nan": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "The": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "default": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "i": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "warn": [0, 1, 2, 7, 13, 14, 16], "us": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20], "an": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "extra": [0, 1, 2, 7, 14, 16], "ad": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "matrix": [0, 1, 2, 7, 14, 16], "ha": [0, 1, 2, 5, 7, 9, 11, 14, 15, 16], "unknown": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19], "categori": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "can": [0, 1, 2, 4, 7, 8, 9, 12, 13, 14, 16, 18, 20], "caus": [0, 1, 2, 6, 7, 14, 16], "unexpect": [0, 1, 2, 7, 14, 16], "chang": [0, 1, 2, 4, 5, 7, 14, 16, 20], "dimens": [0, 1, 2, 6, 7, 14, 16], "some": [0, 1, 2, 3, 5, 7, 9, 10, 11, 13, 14, 15, 16, 18, 19], "case": [0, 1, 2, 4, 7, 13, 14, 15, 16, 18], "nan": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19], "refer": [0, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "1": [0, 1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "system": [0, 7, 12, 13, 14, 16], "http": [0, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "stat": [0, 7, 12, 13, 14, 16], "idr": [0, 7, 12, 13, 14, 16], "ucla": [0, 7, 12, 13, 14, 16], "edu": [0, 5, 7, 9, 12, 13, 14, 16], "r": [0, 7, 12, 13, 14, 16], "librari": [0, 5, 6, 7, 8, 12, 13, 14, 16, 20], "2": [0, 1, 2, 3, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20], "gregori": [0, 7, 12, 13, 14, 16], "carei": [0, 7, 12, 13, 14, 16], "2003": [0, 7, 12, 13, 14, 16], "psych": [0, 7, 12, 13, 14, 16], "colorado": [0, 7, 12, 13, 14, 16], "cours": [0, 7, 12, 13, 14, 16], "psyc5741": [0, 7, 12, 13, 14, 16], "handout": [0, 7, 12, 13, 14, 16], "20categor": [0, 7, 12, 13, 14, 16], "20variabl": [0, 7, 12, 13, 14, 16], "202006": [0, 7, 12, 13, 14, 16], "03": [0, 7, 9, 12, 13, 14, 16, 19], "pdf": [0, 5, 6, 7, 9, 12, 13, 14, 16, 20], "attribut": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "feature_nam": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "method": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "fit_contrast_cod": [0, 7, 14, 16], "get_contrast_matrix": [0, 7, 14, 16], "transform_contrast_cod": [0, 7, 14, 16], "invers": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19], "how": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19], "handl": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20], "miss": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19], "fit": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "time": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19], "which": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "treat": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19], "countabl": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19], "dict": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "label": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20], "behaviour": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19], "specifi": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19], "pass": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20], "fill": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19], "kwarg": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20], "addit": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "specif": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19], "like": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "regularis": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19], "x": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "y": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "accord": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "shape": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "n_sampl": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "n_featur": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "train": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "vector": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "where": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "number": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "sampl": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "featur": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "target": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20], "self": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "fit_transform": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "fit_param": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "data": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "version": [0, 1, 2, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 20], "input": [0, 1, 2, 4, 6, 7, 8, 12, 13, 14, 16, 20], "n_output": [0, 1, 2, 4, 6, 7, 12, 13, 14, 16, 20], "unsupervis": [0, 1, 2, 4, 6, 7, 12, 13, 14, 16, 20], "x_new": [0, 1, 2, 4, 6, 7, 12, 13, 14, 16, 20], "ndarrai": [0, 1, 2, 4, 6, 7, 12, 13, 14, 16, 20], "n_features_new": [0, 1, 2, 4, 6, 7, 12, 13, 14, 16, 20], "get_feature_nam": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "name": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "A": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "note": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "potenti": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "becaus": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19], "constant": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20], "invari": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19], "includ": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "get_param": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "deep": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "get": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "estim": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "If": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "contain": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "subobject": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "param": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "set_param": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "set": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "work": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "simpl": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "well": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "nest": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "object": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "pipelin": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "latter": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "have": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "form": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "compon": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "__": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "so": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "possibl": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "updat": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "each": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "instanc": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "override_return_df": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19], "perform": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20], "new": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19], "overrid": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19], "forc": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19], "frame": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19], "p": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19], "n_features_out": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19], "appli": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "basenencod": [1, 8], "base": [1, 2, 3, 4, 8, 20], "n": [1, 6, 18, 20], "represent": [1, 17], "equival": [1, 8, 20], "one": [1, 2, 3, 8, 9, 10, 11, 12, 13, 20], "hot": [1, 8, 10], "realli": 1, "binari": [1, 4, 8, 9, 12, 18, 20], "actual": [1, 6, 20], "vanilla": 1, "ordin": [1, 8], "when": [1, 4, 9, 10, 13, 19, 20], "downstream": [1, 20], "model": [1, 8, 9, 20], "cope": 1, "nonlinear": 1, "decis": 1, "tree": [1, 11, 15, 17, 18], "higher": [1, 5, 11, 15, 17, 18], "calc_required_digit": [1, 2], "fit_base_n_encod": [1, 2], "number_to_bas": [1, 2], "basen_encod": [1, 2, 8], "x_in": [1, 2, 6, 12, 13], "code": [1, 2, 8, 10, 12, 13, 19], "per": [1, 2, 5, 12], "digit": [1, 2], "dummi": [1, 2, 12], "basen_to_integ": [1, 2, 8], "convert": [1, 2, 8, 9, 12], "numer": [1, 2, 3, 8, 12, 20], "col_transform": [1, 2, 8], "lambda": [1, 2], "bodi": [1, 2], "inverse_transform": [1, 2, 8, 12, 13], "same": [1, 2, 3, 8, 9, 12, 13], "size": [1, 2, 6, 9, 12, 13], "binaryencod": [2, 8], "similar": [2, 3, 5, 8, 10], "onehot": [2, 12], "store": 2, "bitstr": 2, "basen": [2, 8], "cat_boost": 3, "catboostencod": [3, 8], "random_st": [3, 5, 9, 10, 11, 19, 20], "sigma": [3, 5, 9, 10, 11, 19], "support": [3, 5, 8, 9, 11, 18, 19], "binomi": [3, 5, 9, 11, 18, 19], "continu": [3, 5, 9, 11, 18], "For": [3, 4, 5, 6, 9, 11, 18, 19, 20], "polynomi": [3, 5, 8, 9, 11, 18, 19], "see": [3, 4, 5, 6, 8, 9, 11, 18, 19, 20], "polynomialwrapp": [3, 5, 8, 9, 11, 18, 19, 20], "veri": [3, 8, 10], "leav": [3, 8, 20], "out": [3, 6, 8, 20], "calcul": [3, 4, 10], "fly": 3, "consequ": [3, 6], "natur": 3, "vari": [3, 5], "dure": [3, 6, 13], "phase": 3, "necessari": 3, "add": [3, 5, 9, 10, 11, 12, 19], "random": [3, 5, 9, 11, 13, 19, 20], "nois": [3, 5, 9, 10, 11, 19], "bewar": 3, "randomli": 3, "permut": 3, "e": [3, 6, 20], "g": [3, 6, 20], "perm": 3, "np": [3, 12, 20], "len": 3, "iloc": 3, "reset_index": 3, "sort": 3, "coder": 3, "singl": [3, 4, 10, 13, 18], "mean": [3, 4, 5, 9, 10, 13, 15, 18], "float": [3, 4, 5, 9, 10, 11, 15, 17, 18, 19], "normal": [3, 4, 5, 9, 10, 11, 19], "gaussian": [3, 5, 9, 10, 11, 19], "distribut": [3, 5, 9, 10, 11, 19], "order": [3, 5, 9, 10, 11, 13, 15, 18, 19, 20], "decreas": [3, 5, 9, 10, 11, 19, 20], "overfit": [3, 5, 9, 10, 11, 15, 18, 19, 20], "test": [3, 5, 9, 10, 11, 12, 15, 18, 19, 20], "untouch": [3, 5, 9, 10, 11, 19], "give": [3, 10], "standard": [3, 5, 9, 10, 11, 19], "deviat": [3, 5, 9, 10, 11, 19], "spread": [3, 5, 9, 10, 11, 19], "width": [3, 5, 9, 10, 11, 19], "smooth": [3, 11, 15, 17, 18], "m": [3, 8, 15, 17, 18], "probabl": [3, 9, 11, 15, 17, 18], "By": [3, 6], "tech": 3, "yandex": 3, "com": [3, 6, 9, 10, 11, 15, 17, 19, 20], "doc": [3, 5, 6, 20], "dg": 3, "concept": 3, "algorithm": 3, "main": 3, "stages_cat": 3, "docpag": 3, "unbias": [3, 20], "boost": 3, "arxiv": 3, "org": [3, 6, 9, 11, 15, 17, 18, 20], "ab": [3, 9], "1706": 3, "09516": 3, "util": [3, 5, 9, 10, 11, 15, 17, 18, 19], "must": [3, 5, 9, 10, 11, 15, 17, 18, 19], "make": [3, 5, 6, 9, 10, 11, 15, 17, 18, 19], "sure": [3, 5, 9, 10, 11, 15, 17, 18, 19], "behav": [3, 5, 9, 10, 11, 15, 18, 19], "differ": [3, 5, 8, 9, 10, 11, 15, 18, 19], "given": [3, 4, 5, 9, 10, 11, 15, 18, 19, 20], "mainli": [3, 5, 9, 10, 11, 15, 18, 19], "due": [3, 5, 9, 10, 11, 15, 18, 19, 20], "avoid": [3, 5, 9, 10, 11, 15, 18, 19], "On": [3, 5, 9, 10, 11, 15, 17, 18, 19], "should": [3, 5, 9, 10, 11, 13, 15, 18, 19, 20], "call": [3, 5, 9, 10, 11, 15, 18, 19, 20], "without": [3, 5, 9, 10, 11, 15, 18, 19, 20], "countencod": [4, 8], "min_group_s": 4, "combine_min_nan_group": 4, "min_group_nam": 4, "replac": [4, 9, 15, 18], "group": [4, 9, 20], "rang": [4, 6], "value_count": 4, "more": [4, 5, 9], "detail": [4, 8], "minim": 4, "threshold": 4, "need": 4, "ensur": 4, "combin": 4, "leftov": 4, "01": 4, "mai": [4, 5, 6, 19, 20], "type": [4, 5, 8], "becom": [4, 20], "minimum": 4, "too": [4, 9], "long": 4, "In": [4, 5, 9, 11, 15], "join": 4, "alphabet": 4, "_": 4, "delimit": 4, "keep": 4, "exampl": [4, 6, 13, 18], "cross": [4, 9, 20], "valid": [4, 9, 20], "also": [4, 6], "small": [4, 9], "effect": [4, 5, 10, 18, 20], "onli": [4, 9, 11, 20], "Will": [4, 13], "creat": [4, 17, 20], "combine_min_categori": [4, 8], "glmm": 5, "glmmencod": [5, 8], "05": [5, 9, 10, 11, 19], "binomial_target": 5, "supervis": [5, 20], "targetencod": [5, 8, 18], "mestimateencod": [5, 8, 11, 15], "advantag": [5, 6], "solid": 5, "statist": [5, 9, 15, 17], "theori": [5, 9], "behind": 5, "techniqu": [5, 8], "matur": 5, "branch": 5, "No": [5, 20], "hyper": 5, "tune": 5, "amount": 5, "shrinkag": [5, 9], "automat": 5, "determin": 5, "through": 5, "process": [5, 6], "short": [5, 10], "less": 5, "observ": [5, 6, 9], "outcom": 5, "regular": [5, 18, 19], "toward": 5, "prior": [5, 9, 11, 18], "grand": 5, "3": [5, 9, 11, 15, 17, 20], "applic": [5, 9], "both": [5, 12], "global": [5, 9, 18], "log": [5, 9], "odd": [5, 9], "comparison": [5, 11, 15], "jamessteinestim": 5, "statsmodel": 5, "alpha": 5, "implement": [5, 6, 20], "api": [5, 20], "futur": [5, 20], "heurist": 5, "analysi": 5, "regress": [5, 15, 17], "multilevel": 5, "hierarch": [5, 18], "page": [5, 8], "253": 5, "faculti": 5, "psau": 5, "sa": 5, "filedownload": 5, "12": 5, "a1997d0d31f84d13c1cdc44ac39a8f2c": 5, "origin": [5, 10, 18], "hashingencod": [6, 8], "max_process": 6, "max_sampl": 6, "n_compon": 6, "8": 6, "hash_method": 6, "md5": 6, "multivari": 6, "configur": [6, 8], "dimension": 6, "precis": 6, "doe": [6, 9], "maintain": 6, "dictionari": [6, 13, 18], "grow": 6, "accept": 6, "score": 6, "design": [6, 17], "It": [6, 17], "import": [6, 8, 18], "read": 6, "about": 6, "befor": [6, 20], "them": 6, "manual": 6, "inappropri": 6, "slow": 6, "down": 6, "window": 6, "multiprocess": 6, "might": 6, "issu": [6, 9, 13, 20], "github": [6, 15, 17], "scikit": [6, 8], "learn": [6, 8, 9], "contrib": 6, "215": 6, "python": 6, "html": [6, 19, 20], "highlight": 6, "ani": [6, 8], "hashlib": 6, "mani": 6, "limit": [6, 9], "64": 6, "half": 6, "logic": 6, "cpu": 6, "4c4t": 6, "4c8t": 6, "4": [6, 9, 15, 17, 20], "larger": 6, "you": [6, 9, 19], "strong": 6, "recommend": [6, 20], "than": [6, 9, 18], "count": [6, 8, 9, 20], "low": [6, 8, 20], "memori": [6, 18], "machin": [6, 9], "num": 6, "100": 6, "000": 6, "25": [6, 17], "6c12t": 6, "16": 6, "666": 6, "bit": 6, "repres": [6, 10, 12, 13, 17], "we": [6, 9, 13, 20], "high": [6, 9, 11, 15, 17, 18], "cardin": [6, 11, 15, 17, 18], "consid": 6, "up": 6, "32": 6, "larg": 6, "scale": 6, "multitask": 6, "alex": 6, "smola": 6, "paper": [6, 18], "2009": 6, "weinbergeretal09": 6, "r8dde675226a2": 6, "don": 6, "t": [6, 8], "trick": 6, "book": 6, "ai": 6, "dont": 6, "192a6aae3087": 6, "require_data": 6, "static": [6, 13], "hashing_trick": [6, 8], "hashing_method": 6, "make_copi": 6, "basic": 6, "identifi": 6, "descript": 6, "text": 6, "cite": 6, "relev": [6, 18], "literatur": 6, "r6b702480991a": 6, "section": 6, "abov": 6, "kilian": 6, "weinberg": 6, "anirban": 6, "dasgupta": 6, "john": 6, "langford": 6, "josh": 6, "attenberg": 6, "proc": 6, "icml": 6, "helmertencod": [7, 8], "style": 8, "while": [8, 11], "hash": 8, "exist": 8, "share": 8, "few": 8, "properti": 8, "first": [8, 9, 20], "explicitli": 8, "index": 8, "infer": [8, 9, 20], "non": [8, 11, 15, 17, 18], "regardless": [8, 9], "portabl": 8, "pickl": 8, "reus": 8, "later": 8, "thing": 8, "full": [8, 20], "compat": 8, "sklearn": [8, 18, 20], "dataset": [8, 18], "other": [8, 9], "instal": 8, "pip": 8, "conda": 8, "c": 8, "forg": 8, "To": [8, 20], "ce": 8, "jamessteinencod": [8, 9], "leaveoneoutencod": [8, 10, 20], "onehotencod": [8, 12], "ordinalencod": [8, 13], "sumencod": [8, 16], "polynomialencod": [8, 14], "woeencod": [8, 19], "quantileencod": [8, 15], "x_clean": 8, "x_dirti": 8, "fulli": 8, "thei": 8, "your": 8, "script": 8, "isn": 8, "everi": [8, 12], "below": 8, "document": 8, "content": 8, "backward": 8, "catboost": 8, "gener": [8, 9, 12, 20], "linear": 8, "mix": 8, "helmert": 8, "jame": 8, "stein": 8, "One": 8, "transform_leave_one_out": [8, 10], "get_dummi": [8, 12], "reverse_dummi": [8, 12], "ordinal_encod": [8, 13], "quantil": [8, 17], "sum": 8, "summari": 8, "summaryencod": [8, 17], "weight": [8, 9, 18], "evid": 8, "wrapper": 8, "nestedcvwrapp": [8, 20], "modul": 8, "search": 8, "james_stein": 9, "independ": 9, "averag": [9, 18], "written": 9, "js_i": 9, "b": [9, 13, 18], "y_i": 9, "question": [9, 10], "what": [9, 10], "put": 9, "much": 9, "condit": 9, "underfit": 9, "canon": 9, "solut": 9, "howev": [9, 20], "charl": 9, "came": 9, "close": 9, "problem": [9, 11, 15, 17, 18], "intuit": 9, "unreli": 9, "equat": [9, 11, 15, 17], "var": 9, "remain": [9, 20], "do": 9, "know": 9, "let": [9, 20], "alon": 9, "henc": 9, "But": [9, 20], "reliabl": 9, "alreadi": 9, "struggl": 9, "There": 9, "multipl": [9, 18, 20], "pretend": 9, "ident": 9, "pool": 9, "equal": 9, "sens": 9, "squar": 9, "penal": 9, "se": [9, 18], "practic": 9, "wa": 9, "defin": [9, 18], "want": 9, "classif": [9, 11, 15, 17, 18], "allow": 9, "better": 9, "bound": 9, "interv": 9, "unbound": 9, "ratio": [9, 20], "odds_ratio_i": 9, "y_not_i": 9, "tricki": 9, "sometim": 9, "fail": 9, "fatal": 9, "situat": 9, "beta": 9, "deliv": 9, "slightli": 9, "wors": 9, "accuraci": 9, "suffer": 9, "failur": 9, "parametr": 9, "empir": [9, 20], "bay": 9, "19": 9, "20": [9, 18], "www": [9, 19, 20], "jstor": 9, "stabl": 9, "2287098": 9, "chri": 9, "said": 9, "io": [9, 15, 17], "2017": 9, "compar": 9, "mobil": 9, "tabl": 9, "journal": 9, "sagepub": 9, "doi": 9, "10": [9, 11, 15, 17, 18, 20], "1177": 9, "0081175015570097": 9, "paradox": 9, "ration": 9, "philo": 9, "rug": 9, "nl": 9, "romeyn": 9, "present": 9, "2017_romeijn_": 9, "_paris_stein": 9, "5": [9, 15, 17, 18, 20], "statweb": 9, "stanford": 9, "ckirbi": 9, "brad": 9, "article1977": 9, "leave_one_out": 10, "exclud": 10, "current": [10, 20], "row": 10, "level": 10, "reduc": 10, "outlier": 10, "optim": 10, "commonli": 10, "between": [10, 18], "6": 10, "lead": 10, "significantli": 10, "suboptim": 10, "result": [10, 11, 12, 15, 17, 20], "owen": 10, "zhang": 10, "broken": 10, "anoth": 10, "explan": 10, "datasci": 10, "stackexchang": 10, "10839": 10, "fit_column_map": 10, "fit_leave_one_out": 10, "m_estim": 11, "likelihood": 11, "simplifi": 11, "goe": 11, "under": 11, "known": 11, "incid": 11, "rate": 11, "tunabl": [11, 15], "two": [11, 15], "min_samples_leaf": [11, 18], "stronger": [11, 15, 17, 18], "shrink": [11, 15, 17], "neg": [11, 15, 17], "preprocess": [11, 15, 17, 18], "scheme": [11, 15, 17, 18], "predict": [11, 15, 17, 18, 20], "7": [11, 15, 17], "dl": [11, 15, 17, 18], "acm": [11, 15, 17, 18], "citat": [11, 15, 17, 18], "cfm": [11, 15, 17, 18], "id": [11, 15, 17, 18], "507538": [11, 15, 17, 18], "prune": [11, 15, 17], "link": [11, 15, 17], "springer": [11, 15, 17], "chapter": [11, 15, 17], "1007": [11, 15, 17], "bfb0017010": [11, 15, 17], "en": [11, 15, 17], "wikipedia": [11, 15, 17], "wiki": [11, 15, 17], "additive_smooth": [11, 15, 17], "generalized_to_the_case_of_known_incidence_r": [11, 15, 17], "one_hot": 12, "use_cat_nam": 12, "produc": 12, "sinc": 12, "duplic": 12, "suffix": [12, 20], "symbol": 12, "until": 12, "uniqu": 12, "instead": [12, 15], "rais": 12, "valueerror": 12, "encount": [12, 19], "missing": 12, "its": 12, "own": 12, "category_map": [12, 13], "generate_map": 12, "knowledg": 13, "themselv": 13, "assum": [13, 19], "select": [13, 15], "kei": [13, 18], "original_label": 13, "encoded_label": 13, "col1": 13, "col2": 13, "imput": 13, "attempt": 13, "best": 13, "reconstruct": 13, "break": 13, "biject": 13, "those": 13, "occur": 13, "quantile_encod": [15, 17], "modifi": 15, "mestim": 15, "median": 15, "particular": [15, 18], "tackl": [15, 17], "2f978": [15, 17], "030": [15, 17], "85529": [15, 17], "1_14": [15, 17], "done": [15, 17], "right": [15, 17], "wai": [15, 17, 20], "maxhalford": [15, 17], "blog": [15, 17], "fit_quantile_encod": 15, "sum_cod": 16, "75": 17, "richer": 17, "element": 17, "individu": 17, "target_encod": 18, "hierarchi": 18, "blend": 18, "posterior": 18, "over": 18, "expect": 18, "taken": 18, "curv": 18, "axi": 18, "reach": 18, "k": 18, "balanc": [18, 20], "v": [18, 20], "strictli": 18, "bigger": 18, "flatter": 18, "requir": 18, "take": 18, "hier_cola_1": 18, "hier_cola_n": 18, "hier_colb_1": 18, "hier_colb_m": 18, "cola": 18, "colb": 18, "highest": 18, "top": 18, "pd": 18, "load_boston": 18, "bunch": 18, "enc": 18, "cha": 18, "rad": 18, "numeric_dataset": 18, "print": 18, "info": 18, "core": 18, "rangeindex": 18, "506": 18, "entri": 18, "505": 18, "total": [18, 20], "13": 18, "crim": 18, "null": 18, "float64": 18, "zn": 18, "indu": 18, "nox": 18, "rm": 18, "ag": 18, "di": 18, "tax": 18, "ptratio": 18, "lstat": 18, "dtype": 18, "usag": 18, "51": 18, "kb": 18, "load_compass": 18, "hierarchical_map": 18, "compass": 18, "ne": 18, "w": 18, "loc": 18, "hierarchy_dataset": 18, "62263617": 18, "90382995": 18, "17660024": 18, "46051953": 18, "40332791": 18, "load_postcod": 18, "postcod": 18, "hier_col": 18, "hier_postcode_1": 18, "hier_postcode_2": 18, "hier_postcode_3": 18, "hier_postcode_4": 18, "75063473": 18, "90208756": 18, "88328833": 18, "77041254": 18, "68891504": 18, "85012847": 18, "76772574": 18, "88742357": 18, "7933824": 18, "63776756": 18, "9019973": 18, "fit_target_encod": 18, "woe": 19, "purpos": 19, "mostli": 19, "prevent": [19, 20], "divis": 19, "zero": [19, 20], "inform": 19, "explain": 19, "listendata": 19, "2015": 19, "feature_encod": 20, "extend": 20, "subsequ": 20, "inner": 20, "execut": 20, "binar": 20, "underscor": 20, "correspond": 20, "edg": 20, "scenario": 20, "dog": 20, "cat_frog": 20, "dog_cat": 20, "frog": 20, "experiment": 20, "cv": 20, "shuffl": 20, "minimis": 20, "follow": 20, "x_train_encod": 20, "x_train": 20, "y_train": 20, "x_valid_encod": 20, "x_valid": 20, "leakag": 20, "fold": 20, "trn": 20, "val": 20, "kfold": 20, "split": 20, "place": 20, "discuss": 20, "here": 20, "sebastianraschka": 20, "faq": 20, "evalu": 20, "readm": 20, "md": 20, "although": 20, "intern": 20, "most": 20, "our": 20, "illustr": 20, "imagin": 20, "unpredict": 20, "nomin": 20, "perfectli": 20, "ceas": 20, "wrong": 20, "alwai": 20, "major": 20, "seemingli": 20, "And": 20, "start": 20, "unfortun": 20, "even": 20, "immun": 20, "kdd": 20, "exploration_fil": 20, "v12": 20, "02": 20, "ur": 20, "perlich": 20, "reason": 20, "why": 20, "benefit": 20, "greatli": 20, "stratifiedkfold": 20, "batch": 20, "ignor": 20, "provid": 20, "randomst": 20, "seed": 20, "x_test": 20, "m_sampl": 20, "tupl": 20, "groupkfold": 20, "n_numer": 20}, "objects": {"category_encoders.backward_difference": [[0, 0, 1, "", "BackwardDifferenceEncoder"]], "category_encoders.backward_difference.BackwardDifferenceEncoder": [[0, 1, 1, "", "fit"], [0, 1, 1, "", "fit_transform"], [0, 1, 1, "", "get_feature_names"], [0, 1, 1, "", "get_params"], [0, 1, 1, "", "set_params"], [0, 1, 1, "", "transform"]], "category_encoders.basen": [[1, 0, 1, "", "BaseNEncoder"]], "category_encoders.basen.BaseNEncoder": [[1, 1, 1, "", "basen_encode"], [1, 1, 1, "", "basen_to_integer"], [1, 1, 1, "", "col_transform"], [1, 1, 1, "", "fit"], [1, 1, 1, "", "fit_transform"], [1, 1, 1, "", "get_feature_names"], [1, 1, 1, "", "get_params"], [1, 1, 1, "", "inverse_transform"], [1, 1, 1, "", "set_params"], [1, 1, 1, "", "transform"]], "category_encoders.binary": [[2, 0, 1, "", "BinaryEncoder"]], "category_encoders.binary.BinaryEncoder": [[2, 1, 1, "", "basen_encode"], [2, 1, 1, "", "basen_to_integer"], [2, 1, 1, "", "col_transform"], [2, 1, 1, "", "fit"], [2, 1, 1, "", "fit_transform"], [2, 1, 1, "", "get_feature_names"], [2, 1, 1, "", "get_params"], [2, 1, 1, "", "inverse_transform"], [2, 1, 1, "", "set_params"], [2, 1, 1, "", "transform"]], "category_encoders.cat_boost": [[3, 0, 1, "", "CatBoostEncoder"]], "category_encoders.cat_boost.CatBoostEncoder": [[3, 1, 1, "", "fit"], [3, 1, 1, "", "fit_transform"], [3, 1, 1, "", "get_feature_names"], [3, 1, 1, "", "get_params"], [3, 1, 1, "", "set_params"], [3, 1, 1, "", "transform"]], "category_encoders.count": [[4, 0, 1, "", "CountEncoder"]], "category_encoders.count.CountEncoder": [[4, 1, 1, "", "combine_min_categories"], [4, 1, 1, "", "fit"], [4, 1, 1, "", "fit_transform"], [4, 1, 1, "", "get_feature_names"], [4, 1, 1, "", "get_params"], [4, 1, 1, "", "set_params"], [4, 1, 1, "", "transform"]], "category_encoders.glmm": [[5, 0, 1, "", "GLMMEncoder"]], "category_encoders.glmm.GLMMEncoder": [[5, 1, 1, "", "fit"], [5, 1, 1, "", "fit_transform"], [5, 1, 1, "", "get_feature_names"], [5, 1, 1, "", "get_params"], [5, 1, 1, "", "set_params"], [5, 1, 1, "", "transform"]], "category_encoders.hashing": [[6, 0, 1, "", "HashingEncoder"]], "category_encoders.hashing.HashingEncoder": [[6, 1, 1, "", "fit"], [6, 1, 1, "", "fit_transform"], [6, 1, 1, "", "get_feature_names"], [6, 1, 1, "", "get_params"], [6, 1, 1, "", "hashing_trick"], [6, 1, 1, "", "set_params"], [6, 1, 1, "", "transform"]], "category_encoders.helmert": [[7, 0, 1, "", "HelmertEncoder"]], "category_encoders.helmert.HelmertEncoder": [[7, 1, 1, "", "fit"], [7, 1, 1, "", "fit_transform"], [7, 1, 1, "", "get_feature_names"], [7, 1, 1, "", "get_params"], [7, 1, 1, "", "set_params"], [7, 1, 1, "", "transform"]], "category_encoders.james_stein": [[9, 0, 1, "", "JamesSteinEncoder"]], "category_encoders.james_stein.JamesSteinEncoder": [[9, 1, 1, "", "fit"], [9, 1, 1, "", "fit_transform"], [9, 1, 1, "", "get_feature_names"], [9, 1, 1, "", "get_params"], [9, 1, 1, "", "set_params"], [9, 1, 1, "", "transform"]], "category_encoders.leave_one_out": [[10, 0, 1, "", "LeaveOneOutEncoder"]], "category_encoders.leave_one_out.LeaveOneOutEncoder": [[10, 1, 1, "", "fit"], [10, 1, 1, "", "fit_transform"], [10, 1, 1, "", "get_feature_names"], [10, 1, 1, "", "get_params"], [10, 1, 1, "", "set_params"], [10, 1, 1, "", "transform"], [10, 1, 1, "", "transform_leave_one_out"]], "category_encoders.m_estimate": [[11, 0, 1, "", "MEstimateEncoder"]], "category_encoders.m_estimate.MEstimateEncoder": [[11, 1, 1, "", "fit"], [11, 1, 1, "", "fit_transform"], [11, 1, 1, "", "get_feature_names"], [11, 1, 1, "", "get_params"], [11, 1, 1, "", "set_params"], [11, 1, 1, "", "transform"]], "category_encoders.one_hot": [[12, 0, 1, "", "OneHotEncoder"]], "category_encoders.one_hot.OneHotEncoder": [[12, 1, 1, "", "fit"], [12, 1, 1, "", "fit_transform"], [12, 1, 1, "", "get_dummies"], [12, 1, 1, "", "get_feature_names"], [12, 1, 1, "", "get_params"], [12, 1, 1, "", "inverse_transform"], [12, 1, 1, "", "reverse_dummies"], [12, 1, 1, "", "set_params"], [12, 1, 1, "", "transform"]], "category_encoders.ordinal": [[13, 0, 1, "", "OrdinalEncoder"]], "category_encoders.ordinal.OrdinalEncoder": [[13, 1, 1, "", "fit"], [13, 1, 1, "", "fit_transform"], [13, 1, 1, "", "get_feature_names"], [13, 1, 1, "", "get_params"], [13, 1, 1, "", "inverse_transform"], [13, 1, 1, "", "ordinal_encoding"], [13, 1, 1, "", "set_params"], [13, 1, 1, "", "transform"]], "category_encoders.polynomial": [[14, 0, 1, "", "PolynomialEncoder"]], "category_encoders.polynomial.PolynomialEncoder": [[14, 1, 1, "", "fit"], [14, 1, 1, "", "fit_transform"], [14, 1, 1, "", "get_feature_names"], [14, 1, 1, "", "get_params"], [14, 1, 1, "", "set_params"], [14, 1, 1, "", "transform"]], "category_encoders.quantile_encoder": [[15, 0, 1, "", "QuantileEncoder"], [17, 0, 1, "", "SummaryEncoder"]], "category_encoders.quantile_encoder.QuantileEncoder": [[15, 1, 1, "", "fit"], [15, 1, 1, "", "fit_transform"], [15, 1, 1, "", "get_feature_names"], [15, 1, 1, "", "get_params"], [15, 1, 1, "", "set_params"], [15, 1, 1, "", "transform"]], "category_encoders.quantile_encoder.SummaryEncoder": [[17, 1, 1, "", "fit"], [17, 1, 1, "", "fit_transform"], [17, 1, 1, "", "get_feature_names"], [17, 1, 1, "", "get_params"], [17, 1, 1, "", "set_params"]], "category_encoders.sum_coding": [[16, 0, 1, "", "SumEncoder"]], "category_encoders.sum_coding.SumEncoder": [[16, 1, 1, "", "fit"], [16, 1, 1, "", "fit_transform"], [16, 1, 1, "", "get_feature_names"], [16, 1, 1, "", "get_params"], [16, 1, 1, "", "set_params"], [16, 1, 1, "", "transform"]], "category_encoders.target_encoder": [[18, 0, 1, "", "TargetEncoder"]], "category_encoders.target_encoder.TargetEncoder": [[18, 1, 1, "", "fit"], [18, 1, 1, "", "fit_transform"], [18, 1, 1, "", "get_feature_names"], [18, 1, 1, "", "get_params"], [18, 1, 1, "", "set_params"], [18, 1, 1, "", "transform"]], "category_encoders.woe": [[19, 0, 1, "", "WOEEncoder"]], "category_encoders.woe.WOEEncoder": [[19, 1, 1, "", "fit"], [19, 1, 1, "", "fit_transform"], [19, 1, 1, "", "get_feature_names"], [19, 1, 1, "", "get_params"], [19, 1, 1, "", "set_params"], [19, 1, 1, "", "transform"]], "category_encoders.wrapper": [[20, 0, 1, "", "NestedCVWrapper"], [20, 0, 1, "", "PolynomialWrapper"]], "category_encoders.wrapper.NestedCVWrapper": [[20, 1, 1, "", "fit"], [20, 1, 1, "", "fit_transform"], [20, 1, 1, "", "transform"]], "category_encoders.wrapper.PolynomialWrapper": [[20, 1, 1, "", "fit_transform"]]}, "objtypes": {"0": "py:class", "1": "py:method"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"]}, "titleterms": {"backward": 0, "differ": 0, "code": [0, 7, 14, 16], "basen": 1, "binari": 2, "catboost": 3, "encod": [3, 4, 5, 8, 9, 15, 17, 18], "count": 4, "gener": 5, "linear": 5, "mix": 5, "model": 5, "hash": 6, "helmert": 7, "categori": 8, "usag": 8, "indic": 8, "tabl": 8, "jame": 9, "stein": 9, "leav": 10, "One": [10, 12], "out": 10, "m": 11, "estim": 11, "hot": 12, "ordin": 13, "polynomi": 14, "quantil": 15, "sum": 16, "summari": 17, "target": 18, "weight": 19, "evid": 19, "wrapper": 20}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Backward Difference Coding": [[0, "backward-difference-coding"]], "BaseN": [[1, "basen"]], "Binary": [[2, "binary"]], "CatBoost Encoder": [[3, "catboost-encoder"]], "Count Encoder": [[4, "count-encoder"]], "Generalized Linear Mixed Model Encoder": [[5, "generalized-linear-mixed-model-encoder"]], "Hashing": [[6, "hashing"]], "Helmert Coding": [[7, "helmert-coding"]], "Category Encoders": [[8, "category-encoders"]], "Usage": [[8, "usage"]], "Indices and tables": [[8, "indices-and-tables"]], "James-Stein Encoder": [[9, "james-stein-encoder"]], "Leave One Out": [[10, "leave-one-out"]], "M-estimate": [[11, "m-estimate"]], "One Hot": [[12, "one-hot"]], "Ordinal": [[13, "ordinal"]], "Polynomial Coding": [[14, "polynomial-coding"]], "Quantile Encoder": [[15, "quantile-encoder"]], "Sum Coding": [[16, "sum-coding"]], "Summary Encoder": [[17, "summary-encoder"]], "Target Encoder": [[18, "target-encoder"]], "Weight of Evidence": [[19, "weight-of-evidence"]], "Wrappers": [[20, "wrappers"]]}, "indexentries": {"backwarddifferenceencoder (class in category_encoders.backward_difference)": [[0, "category_encoders.backward_difference.BackwardDifferenceEncoder"]], "fit() (category_encoders.backward_difference.backwarddifferenceencoder method)": [[0, "category_encoders.backward_difference.BackwardDifferenceEncoder.fit"]], "fit_transform() (category_encoders.backward_difference.backwarddifferenceencoder method)": [[0, "category_encoders.backward_difference.BackwardDifferenceEncoder.fit_transform"]], "get_feature_names() (category_encoders.backward_difference.backwarddifferenceencoder method)": [[0, "category_encoders.backward_difference.BackwardDifferenceEncoder.get_feature_names"]], "get_params() (category_encoders.backward_difference.backwarddifferenceencoder method)": [[0, "category_encoders.backward_difference.BackwardDifferenceEncoder.get_params"]], "set_params() (category_encoders.backward_difference.backwarddifferenceencoder method)": [[0, "category_encoders.backward_difference.BackwardDifferenceEncoder.set_params"]], "transform() (category_encoders.backward_difference.backwarddifferenceencoder method)": [[0, "category_encoders.backward_difference.BackwardDifferenceEncoder.transform"]], "basenencoder (class in category_encoders.basen)": [[1, "category_encoders.basen.BaseNEncoder"]], "basen_encode() (category_encoders.basen.basenencoder method)": [[1, "category_encoders.basen.BaseNEncoder.basen_encode"]], "basen_to_integer() (category_encoders.basen.basenencoder method)": [[1, "category_encoders.basen.BaseNEncoder.basen_to_integer"]], "col_transform() (category_encoders.basen.basenencoder method)": [[1, "category_encoders.basen.BaseNEncoder.col_transform"]], "fit() (category_encoders.basen.basenencoder method)": [[1, "category_encoders.basen.BaseNEncoder.fit"]], "fit_transform() (category_encoders.basen.basenencoder method)": [[1, "category_encoders.basen.BaseNEncoder.fit_transform"]], "get_feature_names() (category_encoders.basen.basenencoder method)": [[1, "category_encoders.basen.BaseNEncoder.get_feature_names"]], "get_params() (category_encoders.basen.basenencoder method)": [[1, "category_encoders.basen.BaseNEncoder.get_params"]], "inverse_transform() (category_encoders.basen.basenencoder method)": [[1, "category_encoders.basen.BaseNEncoder.inverse_transform"]], "set_params() (category_encoders.basen.basenencoder method)": [[1, "category_encoders.basen.BaseNEncoder.set_params"]], "transform() (category_encoders.basen.basenencoder method)": [[1, "category_encoders.basen.BaseNEncoder.transform"]], "binaryencoder (class in category_encoders.binary)": [[2, "category_encoders.binary.BinaryEncoder"]], "basen_encode() (category_encoders.binary.binaryencoder method)": [[2, "category_encoders.binary.BinaryEncoder.basen_encode"]], "basen_to_integer() (category_encoders.binary.binaryencoder method)": [[2, "category_encoders.binary.BinaryEncoder.basen_to_integer"]], "col_transform() (category_encoders.binary.binaryencoder method)": [[2, "category_encoders.binary.BinaryEncoder.col_transform"]], "fit() (category_encoders.binary.binaryencoder method)": [[2, "category_encoders.binary.BinaryEncoder.fit"]], "fit_transform() (category_encoders.binary.binaryencoder method)": [[2, "category_encoders.binary.BinaryEncoder.fit_transform"]], "get_feature_names() (category_encoders.binary.binaryencoder method)": [[2, "category_encoders.binary.BinaryEncoder.get_feature_names"]], "get_params() (category_encoders.binary.binaryencoder method)": [[2, "category_encoders.binary.BinaryEncoder.get_params"]], "inverse_transform() (category_encoders.binary.binaryencoder method)": [[2, "category_encoders.binary.BinaryEncoder.inverse_transform"]], "set_params() (category_encoders.binary.binaryencoder method)": [[2, "category_encoders.binary.BinaryEncoder.set_params"]], "transform() (category_encoders.binary.binaryencoder method)": [[2, "category_encoders.binary.BinaryEncoder.transform"]], "catboostencoder (class in category_encoders.cat_boost)": [[3, "category_encoders.cat_boost.CatBoostEncoder"]], "fit() (category_encoders.cat_boost.catboostencoder method)": [[3, "category_encoders.cat_boost.CatBoostEncoder.fit"]], "fit_transform() (category_encoders.cat_boost.catboostencoder method)": [[3, "category_encoders.cat_boost.CatBoostEncoder.fit_transform"]], "get_feature_names() (category_encoders.cat_boost.catboostencoder method)": [[3, "category_encoders.cat_boost.CatBoostEncoder.get_feature_names"]], "get_params() (category_encoders.cat_boost.catboostencoder method)": [[3, "category_encoders.cat_boost.CatBoostEncoder.get_params"]], "set_params() (category_encoders.cat_boost.catboostencoder method)": [[3, "category_encoders.cat_boost.CatBoostEncoder.set_params"]], "transform() (category_encoders.cat_boost.catboostencoder method)": [[3, "category_encoders.cat_boost.CatBoostEncoder.transform"]], "countencoder (class in category_encoders.count)": [[4, "category_encoders.count.CountEncoder"]], "combine_min_categories() (category_encoders.count.countencoder method)": [[4, "category_encoders.count.CountEncoder.combine_min_categories"]], "fit() (category_encoders.count.countencoder method)": [[4, "category_encoders.count.CountEncoder.fit"]], "fit_transform() (category_encoders.count.countencoder method)": [[4, "category_encoders.count.CountEncoder.fit_transform"]], "get_feature_names() (category_encoders.count.countencoder method)": [[4, "category_encoders.count.CountEncoder.get_feature_names"]], "get_params() (category_encoders.count.countencoder method)": [[4, "category_encoders.count.CountEncoder.get_params"]], "set_params() (category_encoders.count.countencoder method)": [[4, "category_encoders.count.CountEncoder.set_params"]], "transform() (category_encoders.count.countencoder method)": [[4, "category_encoders.count.CountEncoder.transform"]], "glmmencoder (class in category_encoders.glmm)": [[5, "category_encoders.glmm.GLMMEncoder"]], "fit() (category_encoders.glmm.glmmencoder method)": [[5, "category_encoders.glmm.GLMMEncoder.fit"]], "fit_transform() (category_encoders.glmm.glmmencoder method)": [[5, "category_encoders.glmm.GLMMEncoder.fit_transform"]], "get_feature_names() (category_encoders.glmm.glmmencoder method)": [[5, "category_encoders.glmm.GLMMEncoder.get_feature_names"]], "get_params() (category_encoders.glmm.glmmencoder method)": [[5, "category_encoders.glmm.GLMMEncoder.get_params"]], "set_params() (category_encoders.glmm.glmmencoder method)": [[5, "category_encoders.glmm.GLMMEncoder.set_params"]], "transform() (category_encoders.glmm.glmmencoder method)": [[5, "category_encoders.glmm.GLMMEncoder.transform"]], "hashingencoder (class in category_encoders.hashing)": [[6, "category_encoders.hashing.HashingEncoder"]], "fit() (category_encoders.hashing.hashingencoder method)": [[6, "category_encoders.hashing.HashingEncoder.fit"]], "fit_transform() (category_encoders.hashing.hashingencoder method)": [[6, "category_encoders.hashing.HashingEncoder.fit_transform"]], "get_feature_names() (category_encoders.hashing.hashingencoder method)": [[6, "category_encoders.hashing.HashingEncoder.get_feature_names"]], "get_params() (category_encoders.hashing.hashingencoder method)": [[6, "category_encoders.hashing.HashingEncoder.get_params"]], "hashing_trick() (category_encoders.hashing.hashingencoder static method)": [[6, "category_encoders.hashing.HashingEncoder.hashing_trick"]], "set_params() (category_encoders.hashing.hashingencoder method)": [[6, "category_encoders.hashing.HashingEncoder.set_params"]], "transform() (category_encoders.hashing.hashingencoder method)": [[6, "category_encoders.hashing.HashingEncoder.transform"]], "helmertencoder (class in category_encoders.helmert)": [[7, "category_encoders.helmert.HelmertEncoder"]], "fit() (category_encoders.helmert.helmertencoder method)": [[7, "category_encoders.helmert.HelmertEncoder.fit"]], "fit_transform() (category_encoders.helmert.helmertencoder method)": [[7, "category_encoders.helmert.HelmertEncoder.fit_transform"]], "get_feature_names() (category_encoders.helmert.helmertencoder method)": [[7, "category_encoders.helmert.HelmertEncoder.get_feature_names"]], "get_params() (category_encoders.helmert.helmertencoder method)": [[7, "category_encoders.helmert.HelmertEncoder.get_params"]], "set_params() (category_encoders.helmert.helmertencoder method)": [[7, "category_encoders.helmert.HelmertEncoder.set_params"]], "transform() (category_encoders.helmert.helmertencoder method)": [[7, "category_encoders.helmert.HelmertEncoder.transform"]], "jamessteinencoder (class in category_encoders.james_stein)": [[9, "category_encoders.james_stein.JamesSteinEncoder"]], "fit() (category_encoders.james_stein.jamessteinencoder method)": [[9, "category_encoders.james_stein.JamesSteinEncoder.fit"]], "fit_transform() (category_encoders.james_stein.jamessteinencoder method)": [[9, "category_encoders.james_stein.JamesSteinEncoder.fit_transform"]], "get_feature_names() (category_encoders.james_stein.jamessteinencoder method)": [[9, "category_encoders.james_stein.JamesSteinEncoder.get_feature_names"]], "get_params() (category_encoders.james_stein.jamessteinencoder method)": [[9, "category_encoders.james_stein.JamesSteinEncoder.get_params"]], "set_params() (category_encoders.james_stein.jamessteinencoder method)": [[9, "category_encoders.james_stein.JamesSteinEncoder.set_params"]], "transform() (category_encoders.james_stein.jamessteinencoder method)": [[9, "category_encoders.james_stein.JamesSteinEncoder.transform"]], "leaveoneoutencoder (class in category_encoders.leave_one_out)": [[10, "category_encoders.leave_one_out.LeaveOneOutEncoder"]], "fit() (category_encoders.leave_one_out.leaveoneoutencoder method)": [[10, "category_encoders.leave_one_out.LeaveOneOutEncoder.fit"]], "fit_transform() (category_encoders.leave_one_out.leaveoneoutencoder method)": [[10, "category_encoders.leave_one_out.LeaveOneOutEncoder.fit_transform"]], "get_feature_names() (category_encoders.leave_one_out.leaveoneoutencoder method)": [[10, "category_encoders.leave_one_out.LeaveOneOutEncoder.get_feature_names"]], "get_params() (category_encoders.leave_one_out.leaveoneoutencoder method)": [[10, "category_encoders.leave_one_out.LeaveOneOutEncoder.get_params"]], "set_params() (category_encoders.leave_one_out.leaveoneoutencoder method)": [[10, "category_encoders.leave_one_out.LeaveOneOutEncoder.set_params"]], "transform() (category_encoders.leave_one_out.leaveoneoutencoder method)": [[10, "category_encoders.leave_one_out.LeaveOneOutEncoder.transform"]], "transform_leave_one_out() (category_encoders.leave_one_out.leaveoneoutencoder method)": [[10, "category_encoders.leave_one_out.LeaveOneOutEncoder.transform_leave_one_out"]], "mestimateencoder (class in category_encoders.m_estimate)": [[11, "category_encoders.m_estimate.MEstimateEncoder"]], "fit() (category_encoders.m_estimate.mestimateencoder method)": [[11, "category_encoders.m_estimate.MEstimateEncoder.fit"]], "fit_transform() (category_encoders.m_estimate.mestimateencoder method)": [[11, "category_encoders.m_estimate.MEstimateEncoder.fit_transform"]], "get_feature_names() (category_encoders.m_estimate.mestimateencoder method)": [[11, "category_encoders.m_estimate.MEstimateEncoder.get_feature_names"]], "get_params() (category_encoders.m_estimate.mestimateencoder method)": [[11, "category_encoders.m_estimate.MEstimateEncoder.get_params"]], "set_params() (category_encoders.m_estimate.mestimateencoder method)": [[11, "category_encoders.m_estimate.MEstimateEncoder.set_params"]], "transform() (category_encoders.m_estimate.mestimateencoder method)": [[11, "category_encoders.m_estimate.MEstimateEncoder.transform"]], "onehotencoder (class in category_encoders.one_hot)": [[12, "category_encoders.one_hot.OneHotEncoder"]], "fit() (category_encoders.one_hot.onehotencoder method)": [[12, "category_encoders.one_hot.OneHotEncoder.fit"]], "fit_transform() (category_encoders.one_hot.onehotencoder method)": [[12, "category_encoders.one_hot.OneHotEncoder.fit_transform"]], "get_dummies() (category_encoders.one_hot.onehotencoder method)": [[12, "category_encoders.one_hot.OneHotEncoder.get_dummies"]], "get_feature_names() (category_encoders.one_hot.onehotencoder method)": [[12, "category_encoders.one_hot.OneHotEncoder.get_feature_names"]], "get_params() (category_encoders.one_hot.onehotencoder method)": [[12, "category_encoders.one_hot.OneHotEncoder.get_params"]], "inverse_transform() (category_encoders.one_hot.onehotencoder method)": [[12, "category_encoders.one_hot.OneHotEncoder.inverse_transform"]], "reverse_dummies() (category_encoders.one_hot.onehotencoder method)": [[12, "category_encoders.one_hot.OneHotEncoder.reverse_dummies"]], "set_params() (category_encoders.one_hot.onehotencoder method)": [[12, "category_encoders.one_hot.OneHotEncoder.set_params"]], "transform() (category_encoders.one_hot.onehotencoder method)": [[12, "category_encoders.one_hot.OneHotEncoder.transform"]], "ordinalencoder (class in category_encoders.ordinal)": [[13, "category_encoders.ordinal.OrdinalEncoder"]], "fit() (category_encoders.ordinal.ordinalencoder method)": [[13, "category_encoders.ordinal.OrdinalEncoder.fit"]], "fit_transform() (category_encoders.ordinal.ordinalencoder method)": [[13, "category_encoders.ordinal.OrdinalEncoder.fit_transform"]], "get_feature_names() (category_encoders.ordinal.ordinalencoder method)": [[13, "category_encoders.ordinal.OrdinalEncoder.get_feature_names"]], "get_params() (category_encoders.ordinal.ordinalencoder method)": [[13, "category_encoders.ordinal.OrdinalEncoder.get_params"]], "inverse_transform() (category_encoders.ordinal.ordinalencoder method)": [[13, "category_encoders.ordinal.OrdinalEncoder.inverse_transform"]], "ordinal_encoding() (category_encoders.ordinal.ordinalencoder static method)": [[13, "category_encoders.ordinal.OrdinalEncoder.ordinal_encoding"]], "set_params() (category_encoders.ordinal.ordinalencoder method)": [[13, "category_encoders.ordinal.OrdinalEncoder.set_params"]], "transform() (category_encoders.ordinal.ordinalencoder method)": [[13, "category_encoders.ordinal.OrdinalEncoder.transform"]], "polynomialencoder (class in category_encoders.polynomial)": [[14, "category_encoders.polynomial.PolynomialEncoder"]], "fit() (category_encoders.polynomial.polynomialencoder method)": [[14, "category_encoders.polynomial.PolynomialEncoder.fit"]], "fit_transform() (category_encoders.polynomial.polynomialencoder method)": [[14, "category_encoders.polynomial.PolynomialEncoder.fit_transform"]], "get_feature_names() (category_encoders.polynomial.polynomialencoder method)": [[14, "category_encoders.polynomial.PolynomialEncoder.get_feature_names"]], "get_params() (category_encoders.polynomial.polynomialencoder method)": [[14, "category_encoders.polynomial.PolynomialEncoder.get_params"]], "set_params() (category_encoders.polynomial.polynomialencoder method)": [[14, "category_encoders.polynomial.PolynomialEncoder.set_params"]], "transform() (category_encoders.polynomial.polynomialencoder method)": [[14, "category_encoders.polynomial.PolynomialEncoder.transform"]], "quantileencoder (class in category_encoders.quantile_encoder)": [[15, "category_encoders.quantile_encoder.QuantileEncoder"]], "fit() (category_encoders.quantile_encoder.quantileencoder method)": [[15, "category_encoders.quantile_encoder.QuantileEncoder.fit"]], "fit_transform() (category_encoders.quantile_encoder.quantileencoder method)": [[15, "category_encoders.quantile_encoder.QuantileEncoder.fit_transform"]], "get_feature_names() (category_encoders.quantile_encoder.quantileencoder method)": [[15, "category_encoders.quantile_encoder.QuantileEncoder.get_feature_names"]], "get_params() (category_encoders.quantile_encoder.quantileencoder method)": [[15, "category_encoders.quantile_encoder.QuantileEncoder.get_params"]], "set_params() (category_encoders.quantile_encoder.quantileencoder method)": [[15, "category_encoders.quantile_encoder.QuantileEncoder.set_params"]], "transform() (category_encoders.quantile_encoder.quantileencoder method)": [[15, "category_encoders.quantile_encoder.QuantileEncoder.transform"]], "sumencoder (class in category_encoders.sum_coding)": [[16, "category_encoders.sum_coding.SumEncoder"]], "fit() (category_encoders.sum_coding.sumencoder method)": [[16, "category_encoders.sum_coding.SumEncoder.fit"]], "fit_transform() (category_encoders.sum_coding.sumencoder method)": [[16, "category_encoders.sum_coding.SumEncoder.fit_transform"]], "get_feature_names() (category_encoders.sum_coding.sumencoder method)": [[16, "category_encoders.sum_coding.SumEncoder.get_feature_names"]], "get_params() (category_encoders.sum_coding.sumencoder method)": [[16, "category_encoders.sum_coding.SumEncoder.get_params"]], "set_params() (category_encoders.sum_coding.sumencoder method)": [[16, "category_encoders.sum_coding.SumEncoder.set_params"]], "transform() (category_encoders.sum_coding.sumencoder method)": [[16, "category_encoders.sum_coding.SumEncoder.transform"]], "summaryencoder (class in category_encoders.quantile_encoder)": [[17, "category_encoders.quantile_encoder.SummaryEncoder"]], "fit() (category_encoders.quantile_encoder.summaryencoder method)": [[17, "category_encoders.quantile_encoder.SummaryEncoder.fit"]], "fit_transform() (category_encoders.quantile_encoder.summaryencoder method)": [[17, "category_encoders.quantile_encoder.SummaryEncoder.fit_transform"]], "get_feature_names() (category_encoders.quantile_encoder.summaryencoder method)": [[17, "category_encoders.quantile_encoder.SummaryEncoder.get_feature_names"]], "get_params() (category_encoders.quantile_encoder.summaryencoder method)": [[17, "category_encoders.quantile_encoder.SummaryEncoder.get_params"]], "set_params() (category_encoders.quantile_encoder.summaryencoder method)": [[17, "category_encoders.quantile_encoder.SummaryEncoder.set_params"]], "targetencoder (class in category_encoders.target_encoder)": [[18, "category_encoders.target_encoder.TargetEncoder"]], "fit() (category_encoders.target_encoder.targetencoder method)": [[18, "category_encoders.target_encoder.TargetEncoder.fit"]], "fit_transform() (category_encoders.target_encoder.targetencoder method)": [[18, "category_encoders.target_encoder.TargetEncoder.fit_transform"]], "get_feature_names() (category_encoders.target_encoder.targetencoder method)": [[18, "category_encoders.target_encoder.TargetEncoder.get_feature_names"]], "get_params() (category_encoders.target_encoder.targetencoder method)": [[18, "category_encoders.target_encoder.TargetEncoder.get_params"]], "set_params() (category_encoders.target_encoder.targetencoder method)": [[18, "category_encoders.target_encoder.TargetEncoder.set_params"]], "transform() (category_encoders.target_encoder.targetencoder method)": [[18, "category_encoders.target_encoder.TargetEncoder.transform"]], "woeencoder (class in category_encoders.woe)": [[19, "category_encoders.woe.WOEEncoder"]], "fit() (category_encoders.woe.woeencoder method)": [[19, "category_encoders.woe.WOEEncoder.fit"]], "fit_transform() (category_encoders.woe.woeencoder method)": [[19, "category_encoders.woe.WOEEncoder.fit_transform"]], "get_feature_names() (category_encoders.woe.woeencoder method)": [[19, "category_encoders.woe.WOEEncoder.get_feature_names"]], "get_params() (category_encoders.woe.woeencoder method)": [[19, "category_encoders.woe.WOEEncoder.get_params"]], "set_params() (category_encoders.woe.woeencoder method)": [[19, "category_encoders.woe.WOEEncoder.set_params"]], "transform() (category_encoders.woe.woeencoder method)": [[19, "category_encoders.woe.WOEEncoder.transform"]], "nestedcvwrapper (class in category_encoders.wrapper)": [[20, "category_encoders.wrapper.NestedCVWrapper"]], "polynomialwrapper (class in category_encoders.wrapper)": [[20, "category_encoders.wrapper.PolynomialWrapper"]], "fit() (category_encoders.wrapper.nestedcvwrapper method)": [[20, "category_encoders.wrapper.NestedCVWrapper.fit"]], "fit_transform() (category_encoders.wrapper.nestedcvwrapper method)": [[20, "category_encoders.wrapper.NestedCVWrapper.fit_transform"]], "fit_transform() (category_encoders.wrapper.polynomialwrapper method)": [[20, "category_encoders.wrapper.PolynomialWrapper.fit_transform"]], "transform() (category_encoders.wrapper.nestedcvwrapper method)": [[20, "category_encoders.wrapper.NestedCVWrapper.transform"]]}})